import { EvebleTypes, Guid } from '@eveble/eveble';
import { types } from '../types';
import { Scenario } from '../components/scenario';
export declare class EventSourceableBDDAsserter<EventSourceable> implements types.EventSourceableBDDAsserter<EventSourceable> {
    protected scenario: Scenario<EventSourceable>;
    protected queue: EvebleTypes.Message[];
    protected actual: {
        events: EvebleTypes.Event[];
        scheduledCommands: EvebleTypes.Command[];
        unscheduledCommands: EvebleTypes.Command[];
    };
    protected expected: {
        events: EvebleTypes.Event[];
        scheduledCommands: EvebleTypes.Command[];
        unscheduledCommands: EvebleTypes.Command[];
        state?: EvebleTypes.Props;
    };
    protected originalFillErrorProps: Function;
    protected test?: () => Promise<void>;
    protected ignoreNextEvent?: boolean;
    constructor(scenario: Scenario<EventSourceable>);
    getScenario(): Scenario<EventSourceable>;
    getQueue(): EvebleTypes.Message[];
    getExpectedEvents(): EvebleTypes.Event[];
    getPublishedEvents(): EvebleTypes.Event[];
    getScheduledCommands(): EvebleTypes.Command[];
    getExpectedScheduledCommands(): EvebleTypes.Command[];
    getUnscheduledCommands(): EvebleTypes.Command[];
    getExpectedUnscheduledCommands(): EvebleTypes.Command[];
    given(messages?: EvebleTypes.Message[]): Promise<this>;
    when(messages?: EvebleTypes.Message[]): Promise<this>;
    schedules(commands?: EvebleTypes.Command[]): Promise<this>;
    unschedules(commands?: EvebleTypes.Command[]): Promise<this>;
    execute(): Promise<types.Result<EventSourceable>>;
    protected resolveActualTargetState(id: string | Guid): Promise<EventSourceable | undefined>;
    protected getEventTypeNameList(events: EvebleTypes.Event[]): string[];
    protected removeDependencies(sutInstance: EvebleTypes.EventSourceable): void;
    hasExpectedScheduledCommands(): boolean;
    onPublishedEvent(actualPublishedEvent: EvebleTypes.Event): void;
    onScheduleCommandSend(actualSendCommand: EvebleTypes.Command): void;
    onUnscheduleCommandSend(actualSendCommand: EvebleTypes.Command): void;
    delay(timeInMs: number): Promise<any>;
    protected overrideExtendableErrorFillErrorPropsMethod(): void;
    createCommit(eventSourceableId: string | EvebleTypes.Stringifiable, version: number, events: EvebleTypes.Event[]): Promise<EvebleTypes.Commit>;
    protected setEventVersion(event: EvebleTypes.Event, version: number): void;
    protected run(): Promise<void>;
    protected cleanup(): Promise<void>;
    protected sendMessagesThroughApp(): Promise<void>;
    protected isSameMessage(actualMessage: EvebleTypes.Message, expectedMessage: EvebleTypes.Message): boolean;
}
